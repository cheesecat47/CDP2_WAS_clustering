/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "maxY": 15962.0, "series": [{"data": [[0.0, 11.0], [0.1, 15.0], [0.2, 18.0], [0.3, 20.0], [0.4, 21.0], [0.5, 23.0], [0.6, 27.0], [0.7, 29.0], [0.8, 31.0], [0.9, 31.0], [1.0, 32.0], [1.1, 33.0], [1.2, 35.0], [1.3, 39.0], [1.4, 39.0], [1.5, 41.0], [1.6, 44.0], [1.7, 45.0], [1.8, 48.0], [1.9, 48.0], [2.0, 50.0], [2.1, 52.0], [2.2, 52.0], [2.3, 53.0], [2.4, 54.0], [2.5, 59.0], [2.6, 60.0], [2.7, 60.0], [2.8, 61.0], [2.9, 62.0], [3.0, 65.0], [3.1, 69.0], [3.2, 69.0], [3.3, 70.0], [3.4, 73.0], [3.5, 75.0], [3.6, 78.0], [3.7, 83.0], [3.8, 86.0], [3.9, 91.0], [4.0, 96.0], [4.1, 99.0], [4.2, 101.0], [4.3, 103.0], [4.4, 107.0], [4.5, 113.0], [4.6, 118.0], [4.7, 118.0], [4.8, 122.0], [4.9, 123.0], [5.0, 123.0], [5.1, 128.0], [5.2, 131.0], [5.3, 141.0], [5.4, 147.0], [5.5, 149.0], [5.6, 154.0], [5.7, 157.0], [5.8, 161.0], [5.9, 162.0], [6.0, 162.0], [6.1, 168.0], [6.2, 171.0], [6.3, 178.0], [6.4, 179.0], [6.5, 179.0], [6.6, 180.0], [6.7, 182.0], [6.8, 183.0], [6.9, 184.0], [7.0, 186.0], [7.1, 191.0], [7.2, 191.0], [7.3, 194.0], [7.4, 199.0], [7.5, 199.0], [7.6, 203.0], [7.7, 205.0], [7.8, 208.0], [7.9, 210.0], [8.0, 212.0], [8.1, 213.0], [8.2, 215.0], [8.3, 220.0], [8.4, 222.0], [8.5, 223.0], [8.6, 223.0], [8.7, 225.0], [8.8, 226.0], [8.9, 227.0], [9.0, 229.0], [9.1, 231.0], [9.2, 233.0], [9.3, 237.0], [9.4, 239.0], [9.5, 240.0], [9.6, 246.0], [9.7, 248.0], [9.8, 252.0], [9.9, 257.0], [10.0, 258.0], [10.1, 259.0], [10.2, 260.0], [10.3, 265.0], [10.4, 265.0], [10.5, 268.0], [10.6, 269.0], [10.7, 272.0], [10.8, 274.0], [10.9, 277.0], [11.0, 280.0], [11.1, 281.0], [11.2, 283.0], [11.3, 286.0], [11.4, 288.0], [11.5, 289.0], [11.6, 293.0], [11.7, 295.0], [11.8, 296.0], [11.9, 297.0], [12.0, 299.0], [12.1, 301.0], [12.2, 301.0], [12.3, 301.0], [12.4, 304.0], [12.5, 306.0], [12.6, 307.0], [12.7, 308.0], [12.8, 310.0], [12.9, 312.0], [13.0, 316.0], [13.1, 318.0], [13.2, 318.0], [13.3, 319.0], [13.4, 320.0], [13.5, 322.0], [13.6, 323.0], [13.7, 325.0], [13.8, 327.0], [13.9, 329.0], [14.0, 332.0], [14.1, 333.0], [14.2, 334.0], [14.3, 336.0], [14.4, 338.0], [14.5, 340.0], [14.6, 342.0], [14.7, 343.0], [14.8, 343.0], [14.9, 343.0], [15.0, 345.0], [15.1, 347.0], [15.2, 350.0], [15.3, 351.0], [15.4, 352.0], [15.5, 354.0], [15.6, 355.0], [15.7, 358.0], [15.8, 359.0], [15.9, 359.0], [16.0, 363.0], [16.1, 365.0], [16.2, 368.0], [16.3, 369.0], [16.4, 371.0], [16.5, 373.0], [16.6, 373.0], [16.7, 374.0], [16.8, 376.0], [16.9, 378.0], [17.0, 380.0], [17.1, 383.0], [17.2, 384.0], [17.3, 387.0], [17.4, 392.0], [17.5, 393.0], [17.6, 395.0], [17.7, 397.0], [17.8, 398.0], [17.9, 400.0], [18.0, 402.0], [18.1, 404.0], [18.2, 406.0], [18.3, 406.0], [18.4, 407.0], [18.5, 408.0], [18.6, 410.0], [18.7, 412.0], [18.8, 413.0], [18.9, 415.0], [19.0, 416.0], [19.1, 418.0], [19.2, 420.0], [19.3, 421.0], [19.4, 424.0], [19.5, 426.0], [19.6, 430.0], [19.7, 430.0], [19.8, 433.0], [19.9, 433.0], [20.0, 434.0], [20.1, 436.0], [20.2, 437.0], [20.3, 439.0], [20.4, 439.0], [20.5, 441.0], [20.6, 445.0], [20.7, 446.0], [20.8, 446.0], [20.9, 446.0], [21.0, 447.0], [21.1, 448.0], [21.2, 449.0], [21.3, 450.0], [21.4, 455.0], [21.5, 460.0], [21.6, 461.0], [21.7, 463.0], [21.8, 464.0], [21.9, 465.0], [22.0, 467.0], [22.1, 468.0], [22.2, 469.0], [22.3, 470.0], [22.4, 473.0], [22.5, 474.0], [22.6, 474.0], [22.7, 475.0], [22.8, 477.0], [22.9, 479.0], [23.0, 480.0], [23.1, 482.0], [23.2, 483.0], [23.3, 484.0], [23.4, 485.0], [23.5, 485.0], [23.6, 486.0], [23.7, 487.0], [23.8, 488.0], [23.9, 489.0], [24.0, 492.0], [24.1, 492.0], [24.2, 494.0], [24.3, 495.0], [24.4, 497.0], [24.5, 498.0], [24.6, 499.0], [24.7, 500.0], [24.8, 502.0], [24.9, 504.0], [25.0, 505.0], [25.1, 506.0], [25.2, 508.0], [25.3, 511.0], [25.4, 513.0], [25.5, 515.0], [25.6, 516.0], [25.7, 517.0], [25.8, 517.0], [25.9, 519.0], [26.0, 519.0], [26.1, 519.0], [26.2, 520.0], [26.3, 522.0], [26.4, 523.0], [26.5, 526.0], [26.6, 527.0], [26.7, 528.0], [26.8, 528.0], [26.9, 529.0], [27.0, 533.0], [27.1, 534.0], [27.2, 535.0], [27.3, 537.0], [27.4, 542.0], [27.5, 545.0], [27.6, 545.0], [27.7, 547.0], [27.8, 549.0], [27.9, 550.0], [28.0, 552.0], [28.1, 553.0], [28.2, 554.0], [28.3, 557.0], [28.4, 559.0], [28.5, 562.0], [28.6, 564.0], [28.7, 567.0], [28.8, 569.0], [28.9, 572.0], [29.0, 575.0], [29.1, 579.0], [29.2, 581.0], [29.3, 584.0], [29.4, 585.0], [29.5, 586.0], [29.6, 587.0], [29.7, 588.0], [29.8, 589.0], [29.9, 589.0], [30.0, 591.0], [30.1, 592.0], [30.2, 593.0], [30.3, 594.0], [30.4, 596.0], [30.5, 597.0], [30.6, 598.0], [30.7, 600.0], [30.8, 601.0], [30.9, 601.0], [31.0, 603.0], [31.1, 604.0], [31.2, 605.0], [31.3, 606.0], [31.4, 608.0], [31.5, 611.0], [31.6, 612.0], [31.7, 615.0], [31.8, 616.0], [31.9, 617.0], [32.0, 620.0], [32.1, 621.0], [32.2, 622.0], [32.3, 622.0], [32.4, 624.0], [32.5, 625.0], [32.6, 630.0], [32.7, 632.0], [32.8, 635.0], [32.9, 636.0], [33.0, 639.0], [33.1, 640.0], [33.2, 642.0], [33.3, 642.0], [33.4, 643.0], [33.5, 645.0], [33.6, 646.0], [33.7, 648.0], [33.8, 650.0], [33.9, 652.0], [34.0, 656.0], [34.1, 660.0], [34.2, 662.0], [34.3, 664.0], [34.4, 666.0], [34.5, 670.0], [34.6, 671.0], [34.7, 672.0], [34.8, 672.0], [34.9, 673.0], [35.0, 675.0], [35.1, 676.0], [35.2, 679.0], [35.3, 682.0], [35.4, 686.0], [35.5, 689.0], [35.6, 692.0], [35.7, 693.0], [35.8, 697.0], [35.9, 699.0], [36.0, 699.0], [36.1, 700.0], [36.2, 703.0], [36.3, 707.0], [36.4, 709.0], [36.5, 710.0], [36.6, 713.0], [36.7, 714.0], [36.8, 718.0], [36.9, 720.0], [37.0, 721.0], [37.1, 722.0], [37.2, 726.0], [37.3, 732.0], [37.4, 734.0], [37.5, 737.0], [37.6, 738.0], [37.7, 741.0], [37.8, 743.0], [37.9, 744.0], [38.0, 745.0], [38.1, 747.0], [38.2, 749.0], [38.3, 749.0], [38.4, 752.0], [38.5, 755.0], [38.6, 755.0], [38.7, 756.0], [38.8, 758.0], [38.9, 766.0], [39.0, 767.0], [39.1, 770.0], [39.2, 772.0], [39.3, 777.0], [39.4, 781.0], [39.5, 783.0], [39.6, 785.0], [39.7, 786.0], [39.8, 790.0], [39.9, 796.0], [40.0, 798.0], [40.1, 800.0], [40.2, 806.0], [40.3, 808.0], [40.4, 809.0], [40.5, 812.0], [40.6, 815.0], [40.7, 819.0], [40.8, 823.0], [40.9, 824.0], [41.0, 837.0], [41.1, 838.0], [41.2, 840.0], [41.3, 841.0], [41.4, 847.0], [41.5, 854.0], [41.6, 857.0], [41.7, 861.0], [41.8, 863.0], [41.9, 864.0], [42.0, 867.0], [42.1, 870.0], [42.2, 874.0], [42.3, 876.0], [42.4, 879.0], [42.5, 879.0], [42.6, 880.0], [42.7, 885.0], [42.8, 888.0], [42.9, 889.0], [43.0, 891.0], [43.1, 892.0], [43.2, 895.0], [43.3, 897.0], [43.4, 904.0], [43.5, 904.0], [43.6, 911.0], [43.7, 913.0], [43.8, 913.0], [43.9, 916.0], [44.0, 917.0], [44.1, 928.0], [44.2, 934.0], [44.3, 936.0], [44.4, 936.0], [44.5, 944.0], [44.6, 951.0], [44.7, 954.0], [44.8, 956.0], [44.9, 959.0], [45.0, 961.0], [45.1, 964.0], [45.2, 971.0], [45.3, 974.0], [45.4, 977.0], [45.5, 982.0], [45.6, 986.0], [45.7, 989.0], [45.8, 991.0], [45.9, 991.0], [46.0, 999.0], [46.1, 1006.0], [46.2, 1011.0], [46.3, 1023.0], [46.4, 1025.0], [46.5, 1027.0], [46.6, 1030.0], [46.7, 1032.0], [46.8, 1037.0], [46.9, 1042.0], [47.0, 1046.0], [47.1, 1048.0], [47.2, 1055.0], [47.3, 1066.0], [47.4, 1080.0], [47.5, 1092.0], [47.6, 1098.0], [47.7, 1099.0], [47.8, 1108.0], [47.9, 1117.0], [48.0, 1134.0], [48.1, 1146.0], [48.2, 1149.0], [48.3, 1150.0], [48.4, 1158.0], [48.5, 1160.0], [48.6, 1174.0], [48.7, 1180.0], [48.8, 1183.0], [48.9, 1187.0], [49.0, 1189.0], [49.1, 1195.0], [49.2, 1201.0], [49.3, 1204.0], [49.4, 1212.0], [49.5, 1221.0], [49.6, 1225.0], [49.7, 1228.0], [49.8, 1236.0], [49.9, 1250.0], [50.0, 1269.0], [50.1, 1275.0], [50.2, 1277.0], [50.3, 1285.0], [50.4, 1288.0], [50.5, 1296.0], [50.6, 1310.0], [50.7, 1312.0], [50.8, 1314.0], [50.9, 1326.0], [51.0, 1337.0], [51.1, 1349.0], [51.2, 1353.0], [51.3, 1367.0], [51.4, 1385.0], [51.5, 1389.0], [51.6, 1394.0], [51.7, 1398.0], [51.8, 1423.0], [51.9, 1432.0], [52.0, 1438.0], [52.1, 1451.0], [52.2, 1456.0], [52.3, 1471.0], [52.4, 1483.0], [52.5, 1500.0], [52.6, 1511.0], [52.7, 1514.0], [52.8, 1536.0], [52.9, 1538.0], [53.0, 1549.0], [53.1, 1559.0], [53.2, 1564.0], [53.3, 1580.0], [53.4, 1582.0], [53.5, 1594.0], [53.6, 1601.0], [53.7, 1617.0], [53.8, 1629.0], [53.9, 1640.0], [54.0, 1648.0], [54.1, 1650.0], [54.2, 1659.0], [54.3, 1662.0], [54.4, 1667.0], [54.5, 1671.0], [54.6, 1678.0], [54.7, 1680.0], [54.8, 1682.0], [54.9, 1698.0], [55.0, 1707.0], [55.1, 1708.0], [55.2, 1716.0], [55.3, 1718.0], [55.4, 1732.0], [55.5, 1759.0], [55.6, 1766.0], [55.7, 1795.0], [55.8, 1808.0], [55.9, 1821.0], [56.0, 1835.0], [56.1, 1890.0], [56.2, 1905.0], [56.3, 1912.0], [56.4, 1923.0], [56.5, 1942.0], [56.6, 1946.0], [56.7, 1961.0], [56.8, 1980.0], [56.9, 2001.0], [57.0, 2008.0], [57.1, 2014.0], [57.2, 2040.0], [57.3, 2046.0], [57.4, 2055.0], [57.5, 2067.0], [57.6, 2079.0], [57.7, 2083.0], [57.8, 2098.0], [57.9, 2123.0], [58.0, 2127.0], [58.1, 2136.0], [58.2, 2155.0], [58.3, 2164.0], [58.4, 2186.0], [58.5, 2188.0], [58.6, 2202.0], [58.7, 2209.0], [58.8, 2226.0], [58.9, 2237.0], [59.0, 2251.0], [59.1, 2252.0], [59.2, 2259.0], [59.3, 2267.0], [59.4, 2288.0], [59.5, 2312.0], [59.6, 2320.0], [59.7, 2323.0], [59.8, 2342.0], [59.9, 2357.0], [60.0, 2361.0], [60.1, 2365.0], [60.2, 2369.0], [60.3, 2375.0], [60.4, 2381.0], [60.5, 2384.0], [60.6, 2390.0], [60.7, 2398.0], [60.8, 2404.0], [60.9, 2405.0], [61.0, 2408.0], [61.1, 2415.0], [61.2, 2421.0], [61.3, 2435.0], [61.4, 2445.0], [61.5, 2459.0], [61.6, 2461.0], [61.7, 2471.0], [61.8, 2472.0], [61.9, 2475.0], [62.0, 2478.0], [62.1, 2484.0], [62.2, 2488.0], [62.3, 2498.0], [62.4, 2506.0], [62.5, 2514.0], [62.6, 2524.0], [62.7, 2539.0], [62.8, 2542.0], [62.9, 2555.0], [63.0, 2568.0], [63.1, 2568.0], [63.2, 2571.0], [63.3, 2577.0], [63.4, 2589.0], [63.5, 2591.0], [63.6, 2597.0], [63.7, 2602.0], [63.8, 2604.0], [63.9, 2608.0], [64.0, 2610.0], [64.1, 2613.0], [64.2, 2615.0], [64.3, 2618.0], [64.4, 2621.0], [64.5, 2626.0], [64.6, 2634.0], [64.7, 2636.0], [64.8, 2637.0], [64.9, 2643.0], [65.0, 2649.0], [65.1, 2658.0], [65.2, 2659.0], [65.3, 2664.0], [65.4, 2667.0], [65.5, 2670.0], [65.6, 2674.0], [65.7, 2685.0], [65.8, 2688.0], [65.9, 2690.0], [66.0, 2699.0], [66.1, 2706.0], [66.2, 2710.0], [66.3, 2722.0], [66.4, 2726.0], [66.5, 2731.0], [66.6, 2738.0], [66.7, 2741.0], [66.8, 2746.0], [66.9, 2748.0], [67.0, 2751.0], [67.1, 2775.0], [67.2, 2795.0], [67.3, 2798.0], [67.4, 2811.0], [67.5, 2820.0], [67.6, 2834.0], [67.7, 2845.0], [67.8, 2852.0], [67.9, 2857.0], [68.0, 2860.0], [68.1, 2872.0], [68.2, 2876.0], [68.3, 2888.0], [68.4, 2897.0], [68.5, 2902.0], [68.6, 2903.0], [68.7, 2906.0], [68.8, 2920.0], [68.9, 2923.0], [69.0, 2923.0], [69.1, 2934.0], [69.2, 2938.0], [69.3, 2940.0], [69.4, 2946.0], [69.5, 2962.0], [69.6, 2970.0], [69.7, 2975.0], [69.8, 2989.0], [69.9, 2994.0], [70.0, 3016.0], [70.1, 3018.0], [70.2, 3021.0], [70.3, 3030.0], [70.4, 3043.0], [70.5, 3046.0], [70.6, 3056.0], [70.7, 3056.0], [70.8, 3058.0], [70.9, 3064.0], [71.0, 3071.0], [71.1, 3073.0], [71.2, 3084.0], [71.3, 3089.0], [71.4, 3090.0], [71.5, 3093.0], [71.6, 3114.0], [71.7, 3125.0], [71.8, 3129.0], [71.9, 3143.0], [72.0, 3145.0], [72.1, 3151.0], [72.2, 3165.0], [72.3, 3174.0], [72.4, 3186.0], [72.5, 3194.0], [72.6, 3208.0], [72.7, 3217.0], [72.8, 3231.0], [72.9, 3240.0], [73.0, 3259.0], [73.1, 3269.0], [73.2, 3280.0], [73.3, 3298.0], [73.4, 3312.0], [73.5, 3315.0], [73.6, 3341.0], [73.7, 3348.0], [73.8, 3350.0], [73.9, 3356.0], [74.0, 3360.0], [74.1, 3372.0], [74.2, 3398.0], [74.3, 3402.0], [74.4, 3407.0], [74.5, 3433.0], [74.6, 3433.0], [74.7, 3452.0], [74.8, 3474.0], [74.9, 3480.0], [75.0, 3516.0], [75.1, 3538.0], [75.2, 3547.0], [75.3, 3558.0], [75.4, 3566.0], [75.5, 3593.0], [75.6, 3622.0], [75.7, 3629.0], [75.8, 3633.0], [75.9, 3645.0], [76.0, 3650.0], [76.1, 3667.0], [76.2, 3668.0], [76.3, 3670.0], [76.4, 3679.0], [76.5, 3699.0], [76.6, 3723.0], [76.7, 3738.0], [76.8, 3747.0], [76.9, 3753.0], [77.0, 3772.0], [77.1, 3780.0], [77.2, 3824.0], [77.3, 3834.0], [77.4, 3860.0], [77.5, 3887.0], [77.6, 3904.0], [77.7, 3938.0], [77.8, 3950.0], [77.9, 3971.0], [78.0, 3979.0], [78.1, 3990.0], [78.2, 3997.0], [78.3, 4004.0], [78.4, 4013.0], [78.5, 4015.0], [78.6, 4019.0], [78.7, 4036.0], [78.8, 4049.0], [78.9, 4066.0], [79.0, 4067.0], [79.1, 4075.0], [79.2, 4079.0], [79.3, 4094.0], [79.4, 4101.0], [79.5, 4123.0], [79.6, 4157.0], [79.7, 4189.0], [79.8, 4204.0], [79.9, 4206.0], [80.0, 4227.0], [80.1, 4233.0], [80.2, 4251.0], [80.3, 4268.0], [80.4, 4269.0], [80.5, 4274.0], [80.6, 4278.0], [80.7, 4299.0], [80.8, 4306.0], [80.9, 4315.0], [81.0, 4328.0], [81.1, 4341.0], [81.2, 4346.0], [81.3, 4361.0], [81.4, 4382.0], [81.5, 4420.0], [81.6, 4423.0], [81.7, 4429.0], [81.8, 4450.0], [81.9, 4481.0], [82.0, 4527.0], [82.1, 4533.0], [82.2, 4560.0], [82.3, 4586.0], [82.4, 4593.0], [82.5, 4607.0], [82.6, 4623.0], [82.7, 4625.0], [82.8, 4627.0], [82.9, 4630.0], [83.0, 4652.0], [83.1, 4676.0], [83.2, 4693.0], [83.3, 4715.0], [83.4, 4737.0], [83.5, 4738.0], [83.6, 4765.0], [83.7, 4783.0], [83.8, 4805.0], [83.9, 4817.0], [84.0, 4834.0], [84.1, 4852.0], [84.2, 4870.0], [84.3, 4884.0], [84.4, 4953.0], [84.5, 4976.0], [84.6, 4998.0], [84.7, 5067.0], [84.8, 5101.0], [84.9, 5107.0], [85.0, 5123.0], [85.1, 5144.0], [85.2, 5157.0], [85.3, 5178.0], [85.4, 5223.0], [85.5, 5301.0], [85.6, 5311.0], [85.7, 5344.0], [85.8, 5375.0], [85.9, 5428.0], [86.0, 5440.0], [86.1, 5466.0], [86.2, 5480.0], [86.3, 5497.0], [86.4, 5504.0], [86.5, 5515.0], [86.6, 5528.0], [86.7, 5567.0], [86.8, 5613.0], [86.9, 5643.0], [87.0, 5673.0], [87.1, 5732.0], [87.2, 5752.0], [87.3, 5778.0], [87.4, 5855.0], [87.5, 5949.0], [87.6, 6042.0], [87.7, 6065.0], [87.8, 6097.0], [87.9, 6150.0], [88.0, 6168.0], [88.1, 6221.0], [88.2, 6237.0], [88.3, 6252.0], [88.4, 6398.0], [88.5, 6404.0], [88.6, 6441.0], [88.7, 6461.0], [88.8, 6497.0], [88.9, 6509.0], [89.0, 6595.0], [89.1, 6742.0], [89.2, 6818.0], [89.3, 6859.0], [89.4, 6949.0], [89.5, 6962.0], [89.6, 6995.0], [89.7, 7086.0], [89.8, 7214.0], [89.9, 7646.0], [90.0, 7814.0], [90.1, 7818.0], [90.2, 7839.0], [90.3, 7846.0], [90.4, 7889.0], [90.5, 7913.0], [90.6, 7951.0], [90.7, 7962.0], [90.8, 7994.0], [90.9, 8013.0], [91.0, 8035.0], [91.1, 8046.0], [91.2, 8081.0], [91.3, 8137.0], [91.4, 8157.0], [91.5, 8166.0], [91.6, 8182.0], [91.7, 8200.0], [91.8, 8212.0], [91.9, 8221.0], [92.0, 8229.0], [92.1, 8235.0], [92.2, 8254.0], [92.3, 8263.0], [92.4, 8266.0], [92.5, 8283.0], [92.6, 8298.0], [92.7, 8301.0], [92.8, 8327.0], [92.9, 8354.0], [93.0, 8385.0], [93.1, 8387.0], [93.2, 8393.0], [93.3, 8412.0], [93.4, 8437.0], [93.5, 8474.0], [93.6, 8495.0], [93.7, 8544.0], [93.8, 8618.0], [93.9, 8646.0], [94.0, 8685.0], [94.1, 8706.0], [94.2, 8730.0], [94.3, 8830.0], [94.4, 8853.0], [94.5, 8881.0], [94.6, 8912.0], [94.7, 8941.0], [94.8, 8961.0], [94.9, 8981.0], [95.0, 9020.0], [95.1, 9072.0], [95.2, 9076.0], [95.3, 9085.0], [95.4, 9103.0], [95.5, 9108.0], [95.6, 9121.0], [95.7, 9177.0], [95.8, 9228.0], [95.9, 9261.0], [96.0, 9272.0], [96.1, 9281.0], [96.2, 9284.0], [96.3, 9304.0], [96.4, 9314.0], [96.5, 9316.0], [96.6, 9320.0], [96.7, 9380.0], [96.8, 9395.0], [96.9, 9441.0], [97.0, 9484.0], [97.1, 9541.0], [97.2, 9623.0], [97.3, 9817.0], [97.4, 10004.0], [97.5, 10093.0], [97.6, 10119.0], [97.7, 10629.0], [97.8, 10889.0], [97.9, 14747.0], [98.0, 15198.0], [98.1, 15223.0], [98.2, 15275.0], [98.3, 15283.0], [98.4, 15292.0], [98.5, 15323.0], [98.6, 15386.0], [98.7, 15441.0], [98.8, 15526.0], [98.9, 15558.0], [99.0, 15565.0], [99.1, 15582.0], [99.2, 15618.0], [99.3, 15665.0], [99.4, 15701.0], [99.5, 15724.0], [99.6, 15754.0], [99.7, 15806.0], [99.8, 15934.0], [99.9, 15947.0]], "isOverall": false, "label": "AJP\/1.3 Sampler", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 135.0, "series": [{"data": [[0.0, 83.0], [100.0, 68.0], [200.0, 89.0], [300.0, 117.0], [400.0, 135.0], [500.0, 121.0], [600.0, 108.0], [700.0, 81.0], [800.0, 65.0], [900.0, 54.0], [1000.0, 34.0], [1100.0, 29.0], [1200.0, 27.0], [1300.0, 24.0], [1400.0, 15.0], [1500.0, 22.0], [1600.0, 27.0], [1700.0, 16.0], [1800.0, 9.0], [1900.0, 14.0], [2000.0, 19.0], [2100.0, 15.0], [2300.0, 27.0], [2200.0, 17.0], [2400.0, 31.0], [2500.0, 26.0], [2600.0, 48.0], [2700.0, 26.0], [2800.0, 22.0], [2900.0, 30.0], [3000.0, 33.0], [3100.0, 19.0], [3200.0, 16.0], [3300.0, 19.0], [3400.0, 13.0], [3500.0, 13.0], [3700.0, 12.0], [3600.0, 19.0], [3800.0, 9.0], [3900.0, 14.0], [4000.0, 21.0], [4300.0, 14.0], [4100.0, 9.0], [4200.0, 19.0], [4400.0, 11.0], [4600.0, 15.0], [4500.0, 10.0], [4700.0, 11.0], [4800.0, 11.0], [5100.0, 12.0], [4900.0, 6.0], [5000.0, 3.0], [5300.0, 7.0], [5200.0, 2.0], [5500.0, 9.0], [5400.0, 10.0], [5600.0, 6.0], [5700.0, 5.0], [5800.0, 2.0], [6000.0, 6.0], [6100.0, 5.0], [5900.0, 2.0], [6300.0, 3.0], [6200.0, 5.0], [6600.0, 1.0], [6400.0, 8.0], [6500.0, 3.0], [6900.0, 5.0], [6700.0, 2.0], [6800.0, 4.0], [7000.0, 2.0], [7100.0, 1.0], [7200.0, 2.0], [7600.0, 1.0], [7700.0, 1.0], [7800.0, 9.0], [7900.0, 8.0], [8100.0, 9.0], [8000.0, 8.0], [8300.0, 12.0], [8400.0, 7.0], [8200.0, 20.0], [8600.0, 6.0], [8700.0, 4.0], [8500.0, 3.0], [8800.0, 6.0], [8900.0, 8.0], [9100.0, 7.0], [9000.0, 8.0], [9200.0, 11.0], [9300.0, 11.0], [9400.0, 5.0], [9500.0, 2.0], [9700.0, 1.0], [9600.0, 1.0], [9800.0, 1.0], [9900.0, 1.0], [10100.0, 2.0], [10000.0, 3.0], [10300.0, 1.0], [10600.0, 1.0], [10800.0, 2.0], [11200.0, 1.0], [14700.0, 1.0], [15200.0, 8.0], [15100.0, 2.0], [15300.0, 4.0], [15500.0, 9.0], [15600.0, 4.0], [15700.0, 6.0], [15400.0, 2.0], [15800.0, 2.0], [15900.0, 4.0]], "isOverall": false, "label": "AJP\/1.3 Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 15900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 494.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 949.0, "series": [{"data": [[0.0, 494.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 557.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 949.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 307.38449999999966, "minX": 1.58833086E12, "maxY": 307.38449999999966, "series": [{"data": [[1.58833086E12, 307.38449999999966]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58833086E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.0, "maxY": 12701.666666666666, "series": [{"data": [[2.0, 199.0], [3.0, 52.0], [4.0, 84.0], [5.0, 67.0], [6.0, 49.0], [7.0, 10536.333333333332], [8.0, 44.0], [9.0, 7821.5], [10.0, 7989.5], [11.0, 7830.5], [13.0, 11837.25], [15.0, 5225.0], [16.0, 15.0], [17.0, 7894.0], [18.0, 45.0], [19.0, 60.0], [20.0, 11664.0], [21.0, 10416.333333333332], [22.0, 139.0], [23.0, 33.0], [24.0, 7901.0], [25.0, 10446.5], [26.0, 70.0], [27.0, 31.0], [28.0, 5269.333333333334], [29.0, 7777.5], [30.0, 21.0], [31.0, 12398.0], [33.0, 57.0], [32.0, 7381.0], [35.0, 39.0], [37.0, 30.0], [36.0, 32.0], [39.0, 7640.0], [38.0, 11486.5], [40.0, 5142.666666666666], [41.0, 93.5], [43.0, 586.0], [42.0, 12701.666666666666], [45.0, 645.0], [44.0, 692.0], [46.0, 440.5], [47.0, 603.0], [48.0, 338.8333333333333], [49.0, 399.28571428571433], [51.0, 344.0], [50.0, 294.0], [53.0, 503.0], [52.0, 318.0], [55.0, 491.0], [54.0, 575.0], [57.0, 1150.0], [56.0, 433.0], [59.0, 408.75], [58.0, 499.0], [61.0, 406.0], [60.0, 366.0], [63.0, 545.0], [62.0, 553.0], [67.0, 378.0], [66.0, 422.0], [65.0, 118.0], [64.0, 519.0], [68.0, 479.0], [71.0, 856.0], [70.0, 371.0], [69.0, 368.0], [75.0, 597.0], [74.0, 889.0], [73.0, 6531.0], [72.0, 416.0], [79.0, 600.25], [76.0, 4645.5], [83.0, 3200.333333333333], [82.0, 614.5], [80.0, 809.0], [87.0, 371.0], [86.0, 673.0], [85.0, 526.0], [84.0, 519.0], [89.0, 471.0], [90.0, 569.5], [91.0, 601.0], [88.0, 551.0], [95.0, 4313.0], [94.0, 6579.4], [93.0, 648.0], [92.0, 651.0], [97.0, 3178.666666666667], [99.0, 4300.5], [98.0, 402.0], [96.0, 5586.333333333334], [100.0, 2575.25], [103.0, 320.0], [102.0, 399.0], [101.0, 4146.5], [104.0, 5566.222222222223], [107.0, 3499.6], [106.0, 4165.0], [105.0, 557.0], [108.0, 5051.6], [109.0, 508.3333333333333], [111.0, 681.0], [110.0, 4497.0], [112.0, 840.25], [114.0, 928.0], [115.0, 798.75], [113.0, 617.0], [119.0, 1117.0], [118.0, 533.0], [117.0, 1149.0], [116.0, 867.0], [120.0, 1015.0], [121.0, 438.5], [123.0, 974.0], [122.0, 4522.5], [126.0, 923.0], [127.0, 4384.5], [125.0, 4636.5], [124.0, 776.5], [129.0, 798.5], [130.0, 2936.75], [132.0, 776.5], [134.0, 1277.0], [135.0, 332.75], [133.0, 1044.0], [131.0, 403.0], [128.0, 474.0], [137.0, 741.75], [140.0, 3454.0], [139.0, 4355.0], [141.0, 1398.0], [143.0, 4132.5], [142.0, 664.0], [138.0, 6213.25], [136.0, 5486.666666666666], [144.0, 536.0], [147.0, 437.25], [145.0, 2155.2], [146.0, 262.5], [148.0, 645.5], [150.0, 2619.375], [151.0, 7462.666666666666], [149.0, 4359.5], [153.0, 3555.333333333333], [155.0, 5406.624999999999], [156.0, 5714.833333333333], [157.0, 2174.25], [158.0, 2905.666666666667], [159.0, 4942.0], [154.0, 772.0], [152.0, 4962.0], [160.0, 1422.5], [162.0, 3664.833333333333], [167.0, 488.5], [166.0, 1456.0], [165.0, 1387.0], [164.0, 5238.5], [163.0, 517.0], [161.0, 7957.785714285714], [169.0, 260.0], [168.0, 531.3333333333333], [175.0, 1552.5], [174.0, 1228.0], [173.0, 1350.0], [172.0, 756.0], [171.0, 1160.0], [177.0, 848.0], [178.0, 979.5], [180.0, 349.0], [179.0, 805.5], [182.0, 544.0], [181.0, 802.5], [183.0, 7299.1], [176.0, 4884.0], [184.0, 1899.1666666666665], [185.0, 3007.5], [187.0, 353.6666666666667], [186.0, 5212.166666666667], [188.0, 913.3333333333334], [189.0, 270.0], [190.0, 3903.0], [191.0, 915.5], [194.0, 500.5], [195.0, 3632.6], [196.0, 2185.714285714286], [197.0, 1273.0], [199.0, 1964.4], [198.0, 598.0], [193.0, 819.0], [192.0, 542.0], [200.0, 1472.0], [201.0, 5673.0], [202.0, 4057.0], [203.0, 3596.285714285714], [204.0, 1034.2857142857142], [205.0, 1219.0], [207.0, 755.0], [206.0, 981.0], [208.0, 1284.0], [210.0, 1081.0], [209.0, 1743.6000000000004], [211.0, 1246.0], [213.0, 1435.5], [215.0, 226.6], [214.0, 954.5], [212.0, 827.0], [221.0, 472.5], [223.0, 579.0], [222.0, 709.0], [220.0, 648.0], [218.0, 655.0], [217.0, 837.0], [216.0, 615.0], [224.0, 989.4999999999999], [225.0, 977.5], [226.0, 1159.0], [228.0, 948.5], [227.0, 1094.3333333333333], [230.0, 1320.0], [231.0, 1430.0], [229.0, 713.0], [233.0, 302.33333333333337], [232.0, 998.3333333333333], [234.0, 1503.75], [236.0, 2551.75], [237.0, 2727.5], [239.0, 547.625], [238.0, 1132.0], [235.0, 706.0], [241.0, 916.4285714285714], [240.0, 1900.3333333333335], [242.0, 1648.4285714285713], [243.0, 2495.3333333333335], [245.0, 5331.888888888889], [244.0, 3866.727272727273], [246.0, 812.0], [247.0, 3597.3333333333335], [249.0, 1121.5], [251.0, 1633.6], [252.0, 1239.0], [253.0, 1456.5], [255.0, 1497.0], [254.0, 448.0], [250.0, 635.0], [248.0, 484.0], [269.0, 5719.291666666667], [258.0, 2250.3333333333335], [256.0, 1368.0], [257.0, 600.0], [259.0, 5446.571428571428], [268.0, 4869.333333333333], [261.0, 2546.0], [260.0, 7300.333333333334], [262.0, 3766.0], [263.0, 944.125], [264.0, 3987.75], [265.0, 2419.6666666666665], [267.0, 4863.0], [266.0, 5715.875], [271.0, 1162.3333333333333], [270.0, 402.0], [284.0, 998.0], [273.0, 1905.142857142857], [272.0, 762.0], [274.0, 1706.4], [285.0, 1860.3333333333333], [286.0, 2317.6666666666665], [287.0, 447.0], [277.0, 1834.3333333333335], [278.0, 554.25], [279.0, 1500.0], [280.0, 2053.0], [281.0, 5049.133333333333], [282.0, 2144.75], [283.0, 864.0], [291.0, 2219.0], [289.0, 1303.0], [288.0, 2329.3333333333335], [295.0, 4418.0], [290.0, 2121.25], [293.0, 3197.3333333333335], [292.0, 429.0], [294.0, 2639.5], [298.0, 2008.6], [299.0, 2389.5], [297.0, 2674.0], [300.0, 1881.25], [301.0, 1743.6666666666665], [302.0, 213.0], [303.0, 229.0], [296.0, 484.0], [306.0, 266.3333333333333], [304.0, 1373.0], [305.0, 227.0], [307.0, 3999.333333333333], [316.0, 3497.818181818182], [317.0, 1044.8333333333333], [318.0, 2274.8333333333335], [319.0, 3429.75], [309.0, 1448.5714285714284], [308.0, 6042.75], [310.0, 2632.5555555555557], [312.0, 1619.5], [314.0, 2229.125], [315.0, 301.0], [313.0, 1239.0], [311.0, 1719.75], [321.0, 3211.181818181818], [320.0, 1142.5], [322.0, 4487.777777777777], [332.0, 2056.5], [323.0, 301.0], [325.0, 1334.5], [324.0, 5054.666666666666], [326.0, 4275.375], [327.0, 2017.4], [328.0, 4417.571428571428], [329.0, 5404.571428571428], [331.0, 288.0], [330.0, 4898.333333333334], [335.0, 2964.8], [334.0, 246.0], [333.0, 3053.0], [348.0, 1705.0], [339.0, 2812.333333333333], [338.0, 149.0], [337.0, 2357.0], [336.0, 4331.0], [340.0, 2481.0], [342.0, 2190.0], [341.0, 2856.25], [343.0, 2129.6666666666665], [346.0, 3102.8], [345.0, 4352.333333333333], [347.0, 2011.3333333333335], [349.0, 1632.2], [350.0, 2214.3333333333335], [351.0, 4833.6], [344.0, 162.0], [353.0, 155.66666666666669], [352.0, 2277.8], [354.0, 1395.0], [355.0, 4399.285714285715], [356.0, 1245.3333333333333], [357.0, 65.0], [358.0, 1345.0], [359.0, 1373.0], [361.0, 748.6], [362.0, 1454.75], [363.0, 1390.5833333333333], [360.0, 2250.5], [367.0, 1511.8333333333333], [366.0, 1309.4666666666665], [365.0, 1829.3636363636363], [364.0, 1767.5384615384614], [369.0, 1526.75], [368.0, 2787.571428571429], [370.0, 2306.666666666667], [380.0, 3185.0], [371.0, 203.0], [381.0, 2215.0], [382.0, 1994.0], [383.0, 4223.900000000001], [372.0, 2373.666666666667], [373.0, 1578.5], [374.0, 1540.6666666666665], [375.0, 1834.75], [376.0, 256.0], [377.0, 3308.25], [378.0, 2858.857142857143], [379.0, 365.0], [387.0, 3522.117647058824], [384.0, 2049.25], [385.0, 349.0], [386.0, 2808.625], [390.0, 1057.5], [389.0, 69.0], [388.0, 39.0], [391.0, 625.0], [392.0, 2255.25], [399.0, 1227.5555555555557], [393.0, 1638.25], [394.0, 1734.5], [395.0, 1395.5384615384614], [396.0, 1435.7777777777778], [397.0, 1403.4], [398.0, 1247.3333333333335], [402.0, 1984.0], [401.0, 1449.9166666666667], [400.0, 2067.0], [403.0, 1957.25], [412.0, 3190.666666666667], [414.0, 1798.4], [415.0, 3119.4285714285716], [413.0, 1852.3333333333335], [404.0, 2282.75], [405.0, 2148.3333333333335], [406.0, 1803.25], [407.0, 648.0], [408.0, 1905.4], [409.0, 3503.3333333333335], [410.0, 1836.6666666666667], [411.0, 770.0], [424.0, 2106.75], [417.0, 1371.0], [416.0, 2096.875], [419.0, 1953.0], [418.0, 474.0], [428.0, 1887.2], [430.0, 524.0], [431.0, 693.5], [429.0, 923.3333333333333], [420.0, 723.0], [422.0, 777.0], [421.0, 879.0], [423.0, 643.0], [426.0, 1854.0], [427.0, 1511.0], [425.0, 2688.2], [435.0, 1915.0], [433.0, 1472.0], [432.0, 708.0], [434.0, 1249.0], [437.0, 3160.4], [436.0, 492.0], [438.0, 214.0], [439.0, 1855.75], [440.0, 591.5], [446.0, 2075.375], [445.0, 2238.5000000000005], [444.0, 1754.0], [447.0, 889.0], [442.0, 1711.0], [443.0, 1228.0], [441.0, 1252.3333333333333], [451.0, 3706.25], [449.0, 2107.5714285714284], [448.0, 1168.3333333333333], [450.0, 3368.7142857142853], [452.0, 1427.5], [454.0, 1053.0], [453.0, 2848.6], [456.0, 1011.0], [463.0, 1946.25], [460.0, 2730.0], [461.0, 2408.5], [462.0, 2568.4], [455.0, 1846.0], [457.0, 2085.3333333333335], [458.0, 1408.5], [459.0, 3951.666666666667], [467.0, 2976.666666666667], [465.0, 1707.3333333333333], [464.0, 1621.3333333333333], [466.0, 2150.5], [470.0, 2237.0], [469.0, 722.0], [468.0, 934.0], [471.0, 3384.222222222222], [473.0, 1194.5], [475.0, 2310.0], [474.0, 1892.5], [476.0, 2083.5], [477.0, 2267.5], [478.0, 3079.4], [479.0, 2389.3333333333335], [472.0, 445.0], [483.0, 608.2500000000001], [481.0, 1441.9], [480.0, 2775.6], [487.0, 676.0], [482.0, 1120.6666666666665], [484.0, 2376.416666666667], [485.0, 1052.5], [486.0, 1910.6], [490.0, 2390.5], [491.0, 673.0], [493.0, 3919.2], [492.0, 722.0], [494.0, 2835.2], [495.0, 3775.0000000000005], [508.0, 2061.0], [497.0, 2805.0], [496.0, 1877.3333333333333], [503.0, 1475.5], [502.0, 507.0], [499.0, 3324.0], [498.0, 2515.285714285714], [511.0, 1227.75], [510.0, 2148.5], [509.0, 1649.0], [500.0, 1787.4], [501.0, 1839.6666666666665], [504.0, 2008.0], [506.0, 1800.8], [507.0, 1402.2], [505.0, 2016.5], [517.0, 2311.25], [513.0, 1562.2], [512.0, 2368.2], [527.0, 2236.5], [525.0, 2083.4], [526.0, 2206.8], [514.0, 965.8], [515.0, 2192.4], [529.0, 883.5], [532.0, 1409.5], [531.0, 2557.142857142857], [530.0, 693.0], [533.0, 3087.1428571428573], [535.0, 2008.75], [534.0, 1100.4], [528.0, 2676.5], [540.0, 1537.0], [538.0, 2071.8888888888887], [539.0, 1691.0000000000002], [536.0, 2527.25], [519.0, 437.0], [537.0, 1726.375], [516.0, 753.8], [521.0, 867.3333333333334], [520.0, 2235.3333333333335], [523.0, 2041.0], [522.0, 3456.25], [524.0, 2732.25], [1.0, 75.0]], "isOverall": false, "label": "AJP\/1.3 Sampler", "isController": false}, {"data": [[307.38449999999966, 2611.5339999999983]], "isOverall": false, "label": "AJP\/1.3 Sampler-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 540.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.58833086E12, "maxY": 42966.666666666664, "series": [{"data": [[1.58833086E12, 42966.666666666664]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58833086E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58833086E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2611.5339999999983, "minX": 1.58833086E12, "maxY": 2611.5339999999983, "series": [{"data": [[1.58833086E12, 2611.5339999999983]], "isOverall": false, "label": "AJP\/1.3 Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58833086E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58833086E12, "maxY": 4.9E-324, "series": [{"data": [[1.58833086E12, 0.0]], "isOverall": false, "label": "AJP\/1.3 Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58833086E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58833086E12, "maxY": 4.9E-324, "series": [{"data": [[1.58833086E12, 0.0]], "isOverall": false, "label": "AJP\/1.3 Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58833086E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.58833086E12, "maxY": 15962.0, "series": [{"data": [[1.58833086E12, 15962.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58833086E12, 11.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58833086E12, 7806.700000000006]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58833086E12, 15564.97]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58833086E12, 9018.799999999996]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58833086E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 75.0, "minX": 1.0, "maxY": 15223.0, "series": [{"data": [[134.0, 2109.0], [130.0, 781.5], [142.0, 1497.0], [139.0, 749.0], [145.0, 5157.0], [158.0, 4089.0], [155.0, 4361.0], [45.0, 756.0], [12.0, 560.0], [61.0, 15223.0], [1.0, 75.0], [75.0, 686.0], [22.0, 7402.0], [94.0, 1484.5], [107.0, 1582.0], [106.0, 2030.5], [108.0, 2462.0], [110.0, 1853.5], [29.0, 268.0], [121.0, 1217.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 158.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4.9E-324, "series": [{"data": [[134.0, 0.0], [130.0, 0.0], [142.0, 0.0], [139.0, 0.0], [145.0, 0.0], [158.0, 0.0], [155.0, 0.0], [45.0, 0.0], [12.0, 0.0], [61.0, 0.0], [1.0, 0.0], [75.0, 0.0], [22.0, 0.0], [94.0, 0.0], [107.0, 0.0], [106.0, 0.0], [108.0, 0.0], [110.0, 0.0], [29.0, 0.0], [121.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 158.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.58833086E12, "maxY": 33.333333333333336, "series": [{"data": [[1.58833086E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58833086E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.58833086E12, "maxY": 33.333333333333336, "series": [{"data": [[1.58833086E12, 33.333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58833086E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.58833086E12, "maxY": 33.333333333333336, "series": [{"data": [[1.58833086E12, 33.333333333333336]], "isOverall": false, "label": "AJP\/1.3 Sampler-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58833086E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.58833086E12, "maxY": 33.333333333333336, "series": [{"data": [[1.58833086E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58833086E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

